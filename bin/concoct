#!/usr/bin/env python
from __future__ import division

import sys
import logging

import pandas as p

from itertools import chain

from sklearn.mixture import GMM

from concoct.output import Output
from concoct.parser import arguments
from concoct.cluster import cluster
from concoct.input import load_composition, load_coverage
from concoct.transform import perform_pca, perform_split_pca

def main(comp_file, cov_file, kmer_len, threshold, 
         read_length, cluster_count, 
         split_pca, inits, iters, outdir, pipe,
         pca_components, random_seed,
         cv_type, no_cov_normalization, no_total_coverage,
         args=None):

    # Initialize output handling
    Output(outdir,args)

    composition, contig_lengths, threshold_filter = \
        load_composition(comp_file, kmer_len, threshold)
    cov, cov_range = load_coverage(cov_file, contig_lengths,no_cov_normalization, add_total_coverage=(not no_total_coverage))

    joined = composition.join(
        cov.ix[:,cov_range[0]:cov_range[1]],how="inner")

    if split_pca:
        cov_d = cov[threshold_filter].ix[:,cov_range[0]:cov_range[1]]
            
        # Fix special case in pca_components
        if pca_components[0] == "All":
            pca_components = (cov_d.shape[1],pca_components[1])
        if pca_components[1] == "All":
            pca_components = (pca_components[0],
                              composition[threshold_filter].shape[1])

        transform_filter, cov_pca, comp_pca = \
            perform_split_pca(cov_d, composition[threshold_filter], pca_components)
    else:
        # Fix special cas in pca_components
        if pca_components == "All":
            pca_components = joined[threshold_filter].shape[1]
        #PCA on the contigs that have kmer count greater than threshold
        transform_filter, pca = perform_pca(joined[threshold_filter], pca_components)

    Output.write_original_data(joined[threshold_filter],threshold)
    Output.write_pca(transform_filter,
                     threshold,cov[threshold_filter].index)
    logging.info('PCA transformed data.')
    cluster_args = []
    cluster_args.append((cluster_count,cv_type,inits,iters,transform_filter,random_seed))

#----------------------------------------------------------
#HERE WE SHOULD CALL CHRIS'S C CODE AND QUIT
#----------------------------------------------------------

#WERE WE TO DO THIS HERE OR IN THE C CODE
#    if split_pca:
#        # Transform both unfiltered datasets separately before joining
#        joined_transform, _, _ = perform_split_pca(cov, composition, 
#                                                   pca_components,
#                                                   use_pcas = (cov_pca,comp_pca))
#
#        joined["clustering"] = classifier.predict(joined_transform)
#                    
#    else:
#        joined["clustering"] = classifier.predict(pca.transform(joined))
#        Output.write_cluster_means(pca.inverse_transform(classifier.means_),
#                                   threshold, c)
#    logging.info("CONCOCT Finished")


        
if __name__=="__main__":
    args = arguments()
    if args.split_pca:
        if args.coverage_percentage_pca == 100:
            cov = "All"
        else:
            cov = args.coverage_percentage_pca/100.0
        if args.composition_percentage_pca == 100:
            comp = "All"
        else:
            comp = args.composition_percentage_pca/100.0
        pca_components = (cov,comp)
                          
    else:
        if args.total_percentage_pca == 100:
            pca_components = "All"
        else:
            pca_components = args.total_percentage_pca/100.0

    results = main(args.composition_file, 
                   args.coverage_file,
                   args.kmer_length, 
                   args.length_threshold, 
                   args.read_length, 
                   args.clusters, 
                   args.split_pca, 
                   args.executions, 
                   args.iterations, 
                   args.basename, 
                   args.pipe,
                   pca_components,
                   args.force_seed,
                   args.covariance_type,
                   args.no_cov_normalization,
                   args.no_total_coverage,
                   args)
    print >> sys.stderr, "CONCOCT Finished, the log shows how it went."
