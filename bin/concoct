#!/usr/bin/env python
from __future__ import division

import sys
import logging

import pandas as p

from itertools import chain

from sklearn.mixture import GMM

from concoct.output import Output
from concoct.parser import arguments
from concoct.cluster import cluster
from concoct.input import load_composition, load_coverage
from concoct.transform import perform_pca, perform_split_pca

def main(args):
    # Initialize output handling
    Output(args.basename,args)

    composition, contig_lengths, args.length_threshold_filter = load_composition(
        args.composition_file, 
        args.kmer_length, 
        args.length_threshold
        )

    cov, cov_range = load_coverage(
        args.coverage_file, 
        contig_lengths, 
        args.no_cov_normalization, 
        add_total_coverage=(not args.no_total_coverage)
        )

    joined = composition.join(
        cov.ix[:,cov_range[0]:cov_range[1]],
        how="inner"
        )

    if args.split_pca:
        cov_d = cov[args.length_threshold_filter].ix[:, cov_range[0]:cov_range[1]]
            
        # Fix special case in args.pca_components
        if args.pca_components[0] == "All":
            args.pca_components = (cov_d.shape[1],args.pca_components[1])
        if args.pca_components[1] == "All":
            args.pca_components = (args.pca_components[0],
                              composition[args.length_threshold_filter].shape[1])

        transform_filter, cov_pca, comp_pca = perform_args.split_pca(
            cov_d, 
            composition[args.length_threshold_filter], 
            args.pca_components
            )
    else:
        # Fix special cas in args.pca_components
        if args.pca_components == "All":
            args.pca_components = joined[args.length_threshold_filter].shape[1]

        #PCA on the contigs that have kmer count greater than args.length_threshold
        transform_filter, pca = perform_pca(
            joined[args.length_threshold_filter], 
            args.pca_components
            )

    Output.write_original_data(joined[args.length_threshold_filter],args.length_threshold)
    Output.write_pca(transform_filter,
                     args.length_threshold,cov[args.length_threshold_filter].index)
    logging.info('PCA transformed data.')
    cluster_args = []
    cluster_args.append((args.clusters,transform_filter,args.force_seed))

#----------------------------------------------------------
#HERE WE SHOULD CALL CHRIS'S C CODE AND QUIT
#----------------------------------------------------------

#WERE WE TO DO THIS HERE OR IN THE C CODE
#    if args.split_pca:
#        # Transform both unfiltered datasets separately before joining
#        joined_transform, _, _ = perform_args.split_pca(cov, composition, 
#                                                   args.pca_components,
#                                                   use_pcas = (cov_pca,comp_pca))
#
#        joined["clustering"] = classifier.predict(joined_transform)
#                    
#    else:
#        joined["clustering"] = classifier.predict(pca.transform(joined))
#        Output.write_cluster_means(pca.inverse_transform(classifier.means_),
#                                   args.length_threshold, c)
#    logging.info("CONCOCT Finished")


        
if __name__=="__main__":
    args = arguments()
    if args.split_pca:
        if args.coverage_percentage_pca == 100:
            cov = "All"
        else:
            cov = args.coverage_percentage_pca/100.0
        if args.composition_percentage_pca == 100:
            comp = "All"
        else:
            comp = args.composition_percentage_pca/100.0
        args.pca_components = (cov,comp)
                          
    else:
        if args.total_percentage_pca == 100:
            args.pca_components = "All"
        else:
            args.pca_components = args.total_percentage_pca/100.0

    results = main(args)

    print >> sys.stderr, "CONCOCT Finished, the log shows how it went."
